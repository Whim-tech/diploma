#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "shader.h"
#include "ray_common.glsl"
#include "random.glsl"

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 0, binding = TLAS) uniform accelerationStructureEXT top_level_as;
layout(set = 0, binding = StorageImage, rgba32f) uniform image2D image;
layout(set = 0, binding = UniformBuffer) uniform _GlobalUniforms { global_ubo ubo; };

layout(push_constant) uniform _PushConstantRay { push_constant_t push_constant; };

void main()
{

  uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, push_constant.frame);
  float r1 = rnd(seed);
  float r2 = rnd(seed);
  // Subpixel jitter: send the ray through a different position inside the pixel
  // each time, to provide antialiasing.
  vec2 subpixel_jitter = push_constant.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;

  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 origin    = ubo.inverse_view * vec4(0, 0, 0, 1);
  vec4 target    = ubo.inverse_proj * vec4(d.x, d.y, 1, 1);
  vec4 direction = ubo.inverse_view * vec4(normalize(target.xyz), 0);

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  // prd.hitValue = vec3(1.0, 1.0, 1.0);
  traceRayEXT(
    top_level_as,   // acceleration structure
    rayFlags,       // rayFlags
    0xFF,           // cullMask
    0,              // sbtRecordOffset
    0,              // sbtRecordStride
    0,              // missIndex
    origin.xyz,     // ray origin
    tMin,           // ray min range
    direction.xyz,  // ray direction
    tMax,           // ray max range
    0               // payload (location = 0)
  );

  // Do accumulation over time
  if(push_constant.frame > 0)
  {
    float a         = 1.0f / float(push_constant.frame + 1);
    vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, prd.hitValue, a), 1.f));
  }
  else
  {
    // First frame, replace the value in the buffer
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue, 1.f));
  }
}
